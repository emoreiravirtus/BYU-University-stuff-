"""
File: asteroids.py
Original Author: Br. Burton
Designed to be completed by others
This program implements the asteroids game.
"""
import arcade
import random
import math

# These are Global constants to use throughout the game
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

BULLET_RADIUS = 30
BULLET_SPEED = 10
BULLET_LIFE = 60

SHIP_TURN_AMOUNT = 3
SHIP_THRUST_AMOUNT = 0.25
SHIP_RADIUS = 30

INITIAL_ROCK_COUNT = 5

BIG_ROCK_SPIN = 1
BIG_ROCK_SPEED = 1.5
BIG_ROCK_RADIUS = 15

MEDIUM_ROCK_SPIN = -2
MEDIUM_ROCK_RADIUS = 5

SMALL_ROCK_SPIN = 5
SMALL_ROCK_RADIUS = 2

SPACESHIP_IMG = "images/playerShip1_orange.png"
LARGE_ASTEROID_IMG = "images/meteorGrey_big1.png"
MEDIUM_ASTEROID_IMG = "images/meteorGrey_med1.png"
SMALL_ASTEROID_IMG = "images/meteorGrey_small1.png"
LASER_IMG = "images/laserBlue01.png"
ASTRONAUT_IMG = "images/Astronaut.png"


class Point:
    """
    This class will determine Point attributes
    """

    def __init__(self):
        # Set our Object center.
        self.x = 1
        self.y = 1


class Velocity:

    def __init__(self):
        """
        This class will determine velocity
        """
        self.dx = 10
        self.dy = 10


class FlyingObjects:
    """
    FLying objects parent class.
    """

    def __init__(self):
        self.center = Point()
        self.velocity = Velocity()
        self.alive = True

    def advance(self):
        """
        FlyingObject moves here
        """
        self.center.x += self.velocity.dx
        self.center.y += self.velocity.dy

    def is_off_screen(self, screen_width, screen_height):
        """
        It will check if the object is off screen and put it on the other side of screen.
        """
        if self.center.x > screen_width or self.center.x < 0:
            return True

        if 0 > self.center.y > screen_height or self.center.y < 0:
            return True
        else:
            return False


class Ship(FlyingObjects):
    """
    Ship
    The ship obeys the laws of motion. When in motion, the ship will tend to stay in motion.
    Note that the angle or orientation of the ship can be different than the direction it is traveling.
    The right and left arrows rotate the ship 3 degrees to either direction.
    The up arrow will increase the velocity in the direction the ship is pointed by 0.25 pixels/frame.
    For collision detection, you can assume the ship is a circle of radius 30.
    """

    def __init__(self):
        super().__init__()
        self.center.x = SCREEN_WIDTH / 2
        self.center.y = SCREEN_HEIGHT / 2
        self.velocity.dx = 0.25
        self.velocity.dy = 0.25
        self.radius = 30
        self.angle = 0
        self.texture = arcade.load_texture(SPACESHIP_IMG)
        self.texture2 = arcade.load_texture(ASTRONAUT_IMG)
    def draw(self):
        """
        Draw our ship.
        """
        arcade.draw_texture_rectangle(self.center.x, self.center.y, 30, 30, self.texture, self.angle, 255)

    def move_up(self):
        self.velocity.dx += math.sin(math.radians(self.angle)) * -0.25
        self.velocity.dy += math.cos(math.radians(self.angle)) * 0.25

    def move_down(self):
        self.velocity.dx += math.sin(math.radians(self.angle)) * 0.25
        self.velocity.dy += math.cos(math.radians(self.angle)) * -0.25

    def move_left(self):
        self.angle += 3

    def move_right(self):
        self.angle -= 3


class Asteroids(FlyingObjects):
    """
    Our Game Asteroids class, this is a child class from FlyingObjects, but
    also a parent class for different asteroid classes (small, medium, large)
    """

    def __init__(self):
        super().__init__()
        self.angle = 0
        self.rotation = 1

    def draw(self):
        pass


class LargeAsteroids(Asteroids):
    """
    Large Asteroid Rules:
    - Moves at 1.5 pixels per frame, at a random initial direction.
    - Rotates at 1 degrees per frame.
    - For collision, can be treated like a 15 radius ball.
    - If a large asteroid gets hit, it breaks apart and becomes two medium asteroids and one small one.
            The first medium asteroid has the same velocity as the original large one plus 2 pixel/frame
            in the up direction.
            The second medium asteroid has the same velocity as the original large one plus 2 pixel/frame
            in the down direction.
            The small asteroid has the original velocity plus 5 pixels/frame to the right.
    """

    def __init__(self):
        super().__init__()
        self.texture = arcade.load_texture(LARGE_ASTEROID_IMG)
        self.radius = 15

        # random initial direction, velocity:
        self.center.x = random.uniform(0, SCREEN_HEIGHT)
        self.center.y = random.uniform(0, SCREEN_WIDTH)
        self.velocity.dx = random.uniform(-1.5, 1.5)
        self.velocity.dy = random.uniform(-1.5, 1.5)

    def advance(self):
        """
        Rotate in a rate of 1 degree per frame
        """
        self.angle += 1
        self.center.x += self.velocity.dx
        self.center.y += self.velocity.dy

    def draw(self):
        arcade.draw_texture_rectangle(self.center.x, self.center.y, 65, 65, self.texture, self.angle, 255)


class MediumAsteroids(LargeAsteroids):
    """
    Medium Asteroid Rules:
    - Rotates at -2 degrees per frame.
    - For collision detection, can be treated as a circle with radius 5.
    - If hit, it breaks apart and becomes two small asteroids.
         The small asteroid has the same velocity as the original
            medium one plus 1.5 pixels/frame up and 1.5 pixels/frame to the right.
         The second, 1.5 pixels/frame down and 1.5 to the left.
    """

    def __init__(self):
        super().__init__()
        self.texture = arcade.load_texture(MEDIUM_ASTEROID_IMG)
        self.radius = 5

        # random initial direction, velocity:
        self.velocity.dx = random.uniform(-1.5, 1.5)
        self.velocity.dy = random.uniform(-1.5, 1.5)

    def advance(self):
        """
        Rotate in a rate of 1 degree per frame
        """
        self.angle -= 2
        self.center.x += self.velocity.dx
        self.center.y += self.velocity.dy

    def draw(self):
        arcade.draw_texture_rectangle(self.center.x, self.center.y, 30, 30, self.texture, self.angle, 255)


class SmallAsteroids(MediumAsteroids):
    """
    Small Asteroid Rules:
    - Rotates at 5 degrees per frame.
    - For collision, can be treated like a 2 radius ball.
    - If is hit, is destroyed and removed from game.
    """

    def __init__(self):
        super().__init__()
        self.texture = arcade.load_texture(SMALL_ASTEROID_IMG)
        self.radius = 2

        # random initial direction, velocity:
        self.velocity.dx = random.uniform(-1.5, 1.5)
        self.velocity.dy = random.uniform(-1.5, 1.5)

    def advance(self):
        """
        Rotate in a rate of 1 degree per frame
        """
        self.angle += 5
        self.center.x += self.velocity.dx
        self.center.y += self.velocity.dy

    def draw(self):
        arcade.draw_texture_rectangle(self.center.x, self.center.y, 20, 20, self.texture, self.angle, 255)


class Bullet(FlyingObjects):

    def __init__(self):
        """
        The bullets are little balls that comes out from Ship to destroy an asteroid
        """
        super().__init__()
        self.texture = arcade.load_texture(LASER_IMG)
        self.angle = 0
        self.life = 60
        self.radius = 30

    def draw(self):
        """
        Draw our Bullet on screen
        """
        arcade.draw_texture_rectangle(self.center.x, self.center.y, 100, 15, self.texture, self.angle, 255)

    def fire(self, angle: float):
        """
        Fire the bullet method.
        :param angle:
        :return: none
        """
        self.velocity.dx = math.cos(math.radians(angle)) * 10
        self.velocity.dy = math.sin(math.radians(angle)) * 10
        self.advance()


class Game(arcade.Window):
    """
    This class handles all the game callbacks and interaction
    This class will then call the appropriate functions of
    each of the above classes.
    You are welcome to modify anything in this class.
    """

    def __init__(self, width, height):
        """
        Sets up the initial conditions of the game
        :param width: Screen width
        :param height: Screen height
        """
        super().__init__(width, height)
        arcade.set_background_color(arcade.color.SMOKY_BLACK)

        # Creating our asteroids and bullets arrays.
        self.asteroids = []
        self.bullets = []

        self.game_over = False

        # Creating ship.
        self.ship = Ship()

        # To help with ship movements.
        self.move_up = False

        self.held_keys = set()

        self.rocks_level = 0

        self.create_asteroids()


    def on_draw(self):
        """
        Called automatically by the arcade framework.
        Handles the responsibility of drawing all elements.
        """

        # clear the screen to begin drawing
        arcade.start_render()

        self.ship.draw()

        for asteroid in self.asteroids:
            asteroid.draw()

        for bullet in self.bullets:
            bullet.draw()

        if not self.ship.alive:
            arcade.draw_text('astronaut message ~"...HELP! MAYDAY MAYDAY"', start_x=SCREEN_WIDTH/3, start_y=SCREEN_HEIGHT/2, font_size=20, color=arcade.color.WHITE)
            arcade.draw_text('press "G" to help our astronaut', start_x=SCREEN_WIDTH/3, start_y=SCREEN_HEIGHT/3, font_size=10, color=arcade.color.WHITE)

        if not self.asteroids:
            arcade.draw_text('great astronaut!!! want to discover more asteroids?', start_x=SCREEN_WIDTH/3, start_y=SCREEN_HEIGHT/2, font_size=20, color=arcade.color.WHITE)
            arcade.draw_text('press "R" to play again', start_x=SCREEN_WIDTH/2, start_y=SCREEN_HEIGHT/3, font_size=10, color=arcade.color.WHITE)

    def update(self, delta_time):
        """
        Update each object in the game.
        :param delta_time: tells us how much time has actually elapsed
        """

        for asteroid in self.asteroids:
            asteroid.advance()
            self.check_off_screen(asteroid)

        for bullet in self.bullets:
            bullet.advance()
            self.check_off_screen(bullet)
            bullet.life -= 1
            if bullet.life < 0:
                bullet.alive = False
                self.cleanup_zombies()

        if not self.ship.alive:
            self.ship.angle -= 5

        self.ship.advance()

        self.check_keys()

        self.check_off_screen(self.ship)

        self.check_collisions()

        # TODO: Check for collisions

    def create_asteroid(self):
        """
        This will create a new asteroid object and add it to asteroids list.
        :return: Append a asteroid to asteroids[]
        """
        self.check_keys()
        asteroid = LargeAsteroids()
        self.asteroids.append(asteroid)

    def check_off_screen(self, flyingobject):
        """
        Checks if the object is off screen. so It will wrap.
        """
        if flyingobject.center.x > SCREEN_WIDTH:
            flyingobject.center.x = 0
        if flyingobject.center.x < 0:
            flyingobject.center.x = SCREEN_WIDTH

        if flyingobject.center.y > SCREEN_HEIGHT:
            flyingobject.center.y = 0
        if flyingobject.center.y < 0:
            flyingobject.center.y = SCREEN_HEIGHT

    def check_collisions(self):
        """
        Checks to see if bullets have hit targets.
        Updates scores and removes dead items.
        :return:
        """

        for asteroid in self.asteroids:
            if asteroid.alive:
                too_close = self.ship.radius + asteroid.radius

            if (abs(self.ship.center.x - asteroid.center.x) < too_close and
                    abs(self.ship.center.y - asteroid.center.y) < too_close):
                self.ship.alive = False
                self.cleanup_zombies()

        for bullet in self.bullets:
            for asteroid in self.asteroids:

                # Make sure they are both alive before checking for a collision
                if asteroid.alive:
                    too_close = bullet.radius + asteroid.radius

                    if (abs(bullet.center.x - asteroid.center.x) < too_close and
                            abs(bullet.center.y - asteroid.center.y) < too_close):
                        # its a hit!
                        bullet.alive = False

                        self.cleanup_zombies()

                        if asteroid.radius == 15:
                            new_asteroid1 = MediumAsteroids()
                            new_asteroid2 = MediumAsteroids()
                            new_asteroid3 = SmallAsteroids()
                            new_asteroid1.center.x = asteroid.center.x
                            new_asteroid2.center.x = asteroid.center.x
                            new_asteroid1.center.y = asteroid.center.y
                            new_asteroid2.center.y = asteroid.center.y
                            new_asteroid3.center.x = asteroid.center.x
                            new_asteroid3.center.y = asteroid.center.y

                            self.asteroids.append(new_asteroid1)
                            self.asteroids.append(new_asteroid2)
                            self.asteroids.remove(asteroid)

                        if asteroid.radius == 5:
                            new_asteroid1 = SmallAsteroids()
                            new_asteroid2 = SmallAsteroids()
                            new_asteroid1.center.x = asteroid.center.x
                            new_asteroid2.center.x = asteroid.center.x
                            new_asteroid1.center.y = asteroid.center.y
                            new_asteroid2.center.y = asteroid.center.y

                            self.asteroids.append(new_asteroid1)
                            self.asteroids.append(new_asteroid2)
                            self.asteroids.remove(asteroid)

                        if asteroid.radius == 2:
                            self.asteroids.remove(asteroid)

    def cleanup_zombies(self):
        """
        Removes any dead bullets or targets from the list.
        :return:
        """
        for bullet in self.bullets:
            if not bullet.alive:
                self.bullets.remove(bullet)

        if not self.ship.alive:
            self.ship.texture = self.ship.texture2

    def check_keys(self):
        """
        This function checks for keys that are being held down.
        You will need to put your own method calls in here.
        """

        if arcade.key.LEFT in self.held_keys:
            self.ship.move_left()

        if arcade.key.RIGHT in self.held_keys:
            self.ship.move_right()

        if arcade.key.UP in self.held_keys:
            self.ship.move_up()

        if arcade.key.DOWN in self.held_keys:
            self.ship.move_down()

        if arcade.key.SPACE in self.held_keys:
            bullet = Bullet()
            bullet.angle = self.ship.angle + 90
            bullet.center.x = self.ship.center.x
            bullet.center.y = self.ship.center.y
            angle = self.ship.angle + 90
            bullet.fire(angle)
            self.bullets.append(bullet)

    def on_key_press(self, key: int, modifiers: int):
        """
        Puts the current key in the set of keys that are being held.
        You will need to add things here to handle firing the bullet.
        """
        if self.ship.alive:
            self.held_keys.add(key)

            if key == arcade.key.SPACE:
                bullet = Bullet()
                bullet.angle = self.ship.angle + 90
                bullet.center.x = self.ship.center.x
                bullet.center.y = self.ship.center.y
                angle = self.ship.angle + 90
                bullet.fire(angle)
                self.bullets.append(bullet)

        if not self.asteroids:
            if key == arcade.key.R:
                self.create_asteroids()


        if not self.ship.alive:
            if key == arcade.key.G:
                self.ship.alive = True
                self.ship.texture = arcade.load_texture(SPACESHIP_IMG)
                self.ship.velocity.dx = 0.3
                self.ship.velocity.dy = 0.3

    def on_key_release(self, key: int, modifiers: int):
        """
        Removes the current key from the set of held keys.
        """
        if key in self.held_keys:
            self.held_keys.remove(key)

    def create_asteroids(self):
        self.rocks_level += 3
        rocks = 0
        while rocks < self.rocks_level:
            self.create_asteroid()
            rocks += 1


# Creates the game and starts it going
window = Game(SCREEN_WIDTH, SCREEN_HEIGHT)
arcade.run()


